# Cache Management Workflow
# Provides cache monitoring, cleanup, and optimization for dependency caching
# Addresses GitHub Issue #53

name: Cache Management

on:
  schedule:
    # Run cache cleanup weekly on Sundays at 3 AM UTC
    - cron: '0 3 * * 0'
  workflow_dispatch:
    inputs:
      operation:
        description: 'Cache operation to perform'
        required: true
        default: 'status'
        type: choice
        options:
          - status
          - cleanup
          - warm-up

permissions:
  contents: read
  actions: write

jobs:
  cache-status:
    runs-on: ubuntu-latest
    name: Cache Status Report
    if: github.event_name == 'schedule' || github.event.inputs.operation == 'status'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate Cache Report
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Get repository cache information
            const { data: caches } = await github.rest.actions.getActionsCacheList({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            
            console.log(`Found ${caches.total_count} cache entries`);
            
            // Analyze caches by type
            const cacheTypes = {
              'R packages': caches.actions_caches.filter(c => c.key.includes('-release-') || c.key.includes('-devel-')),
              'System dependencies': caches.actions_caches.filter(c => c.key.includes('-apt-')),
              'Security tools': caches.actions_caches.filter(c => c.key.includes('-security-'))
            };
            
            let report = `# Cache Status Report\n\n`;
            report += `**Generated:** ${new Date().toISOString()}\n`;
            report += `**Total Cache Entries:** ${caches.total_count}\n\n`;
            
            for (const [type, entries] of Object.entries(cacheTypes)) {
              report += `## ${type}\n`;
              report += `**Count:** ${entries.length}\n`;
              
              if (entries.length > 0) {
                const totalSize = entries.reduce((sum, cache) => sum + cache.size_in_bytes, 0);
                report += `**Total Size:** ${(totalSize / 1024 / 1024).toFixed(2)} MB\n`;
                
                report += `\n| Key | Size | Last Accessed |\n`;
                report += `|-----|------|---------------|\n`;
                
                entries.slice(0, 5).forEach(cache => {
                  const sizeMB = (cache.size_in_bytes / 1024 / 1024).toFixed(2);
                  const lastAccessed = new Date(cache.last_accessed_at).toLocaleDateString();
                  report += `| ${cache.key} | ${sizeMB} MB | ${lastAccessed} |\n`;
                });
                
                if (entries.length > 5) {
                  report += `| ... and ${entries.length - 5} more | | |\n`;
                }
              }
              report += `\n`;
            }
            
            // Cache efficiency metrics
            report += `## Cache Efficiency Recommendations\n\n`;
            
            const oldCaches = caches.actions_caches.filter(cache => {
              const daysSinceAccess = (Date.now() - new Date(cache.last_accessed_at).getTime()) / (1000 * 60 * 60 * 24);
              return daysSinceAccess > 7;
            });
            
            if (oldCaches.length > 0) {
              report += `- **${oldCaches.length} caches** haven't been accessed in over 7 days and could be cleaned up\n`;
            }
            
            const largeCaches = caches.actions_caches.filter(cache => cache.size_in_bytes > 500 * 1024 * 1024);
            if (largeCaches.length > 0) {
              report += `- **${largeCaches.length} caches** are larger than 500MB and may benefit from optimization\n`;
            }
            
            report += `\n---\n*This report was automatically generated by the cache management workflow.*`;
            
            // Write report to file
            fs.writeFileSync('cache-status-report.md', report);
            
            console.log('Cache status report generated');

      - name: Upload Cache Report
        uses: actions/upload-artifact@v4
        with:
          name: cache-status-report-${{ github.run_number }}
          path: cache-status-report.md
          retention-days: 30

  cache-cleanup:
    runs-on: ubuntu-latest
    name: Cache Cleanup
    if: github.event.inputs.operation == 'cleanup'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Clean Old Caches
        uses: actions/github-script@v7
        with:
          script: |
            // Get all caches
            const { data: caches } = await github.rest.actions.getActionsCacheList({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            
            console.log(`Found ${caches.total_count} cache entries`);
            
            // Identify caches to delete (older than 30 days or inactive for 14 days)
            const now = Date.now();
            const cachesToDelete = caches.actions_caches.filter(cache => {
              const daysSinceCreated = (now - new Date(cache.created_at).getTime()) / (1000 * 60 * 60 * 24);
              const daysSinceAccessed = (now - new Date(cache.last_accessed_at).getTime()) / (1000 * 60 * 60 * 24);
              
              return daysSinceCreated > 30 || daysSinceAccessed > 14;
            });
            
            console.log(`Identified ${cachesToDelete.length} caches for cleanup`);
            
            // Delete old caches
            let deletedCount = 0;
            for (const cache of cachesToDelete) {
              try {
                await github.rest.actions.deleteActionsCacheById({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  cache_id: cache.id
                });
                console.log(`Deleted cache: ${cache.key}`);
                deletedCount++;
              } catch (error) {
                console.error(`Failed to delete cache ${cache.key}: ${error.message}`);
              }
            }
            
            console.log(`Successfully deleted ${deletedCount} cache entries`);

  cache-warmup:
    runs-on: ${{ matrix.os }}
    name: Cache Warm-up (${{ matrix.os }})
    if: github.event.inputs.operation == 'warm-up'
    
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
        
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: 'release'
          use-public-rspm: true

      - name: Cache R packages
        uses: actions/cache@v4
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-release-${{ hashFiles('DESCRIPTION') }}-${{ hashFiles('renv.lock') }}
          restore-keys: |
            ${{ runner.os }}-release-${{ hashFiles('DESCRIPTION') }}-
            ${{ runner.os }}-release-

      - name: Install Dependencies (Warm Cache)
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: any::rcmdcheck
          needs: check
          cache-version: 2

      - name: Cache System Dependencies (Linux)
        if: runner.os == 'Linux'
        uses: actions/cache@v4
        with:
          path: /var/cache/apt
          key: ${{ runner.os }}-apt-${{ hashFiles('.github/workflows/R-CMD-check.yml') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: Install System Dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libcurl4-openssl-dev \
            libxml2-dev \
            libssl-dev \
            libfontconfig1-dev \
            libcairo2-dev \
            libfreetype6-dev \
            libpng-dev \
            libtiff5-dev \
            libjpeg-dev

      - name: Verify Cache Population
        run: |
          echo "Cache warm-up completed for ${{ matrix.os }}"
          echo "R library path: ${{ env.R_LIBS_USER }}"
          if [ "$RUNNER_OS" = "Linux" ]; then
            echo "System dependencies cached in: /var/cache/apt"
          fi
        shell: bash