name: Build and deploy pkgdown site

on:
  push:
    branches: [main, master, dev]
  pull_request:
    branches: [main, master, dev]
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      R_KEEP_PKG_SOURCE: yes
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Pandoc
        uses: r-lib/actions/setup-pandoc@v2
        
      - name: Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: 'release'
          use-public-rspm: true
          
      - name: Cache R packages (pkgdown)
        uses: actions/cache@v4
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-pkgdown-${{ hashFiles('DESCRIPTION') }}-${{ hashFiles('.github/workflows/pkgdown.yml') }}
          restore-keys: |
            ${{ runner.os }}-pkgdown-${{ hashFiles('DESCRIPTION') }}-
            ${{ runner.os }}-pkgdown-
            
      - name: Cache system dependencies (Linux)
        uses: actions/cache@v4
        with:
          path: /var/cache/apt
          key: ${{ runner.os }}-pkgdown-apt-${{ hashFiles('.github/workflows/pkgdown.yml') }}
          restore-keys: |
            ${{ runner.os }}-pkgdown-apt-
            
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libcurl4-openssl-dev \
            libxml2-dev \
            libssl-dev \
            libfontconfig1-dev \
            libcairo2-dev \
            libfreetype6-dev \
            libpng-dev \
            libtiff5-dev \
            libjpeg-dev
            
      - name: Install R dependencies
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: any::pkgdown, local::.
          needs: website
          cache-version: 2
          
      - name: Build pkgdown site
        run: |
          pkgdown::build_site_github_pages(new_process = FALSE, install = FALSE)
        shell: Rscript {0}
        
      - name: Upload site artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs

  deploy:
    # Only deploy on pushes to main/master branch, not on PRs
    if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  validate:
    runs-on: ubuntu-latest
    needs: build
    if: always() && needs.build.result == 'success'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download site artifact
        uses: actions/download-artifact@v4
        with:
          name: github-pages
          path: site-artifact
          
      - name: Extract and validate site
        run: |
          cd site-artifact
          tar -xf artifact.tar
          
          # Basic validation checks
          echo "=== Site Structure Validation ==="
          ls -la
          
          # Check if main files exist
          if [ ! -f "index.html" ]; then
            echo "ERROR: index.html not found"
            exit 1
          fi
          
          if [ ! -d "reference" ]; then
            echo "ERROR: reference directory not found"
            exit 1
          fi
          
          echo "‚úÖ Basic site structure validation passed"
          
          # Check for broken internal links (basic check)
          echo "=== Link Validation ==="
          find . -name "*.html" -exec grep -l "href.*404" {} \; > broken_links.txt || true
          
          if [ -s broken_links.txt ]; then
            echo "‚ö†Ô∏è  Potential broken links found:"
            cat broken_links.txt
          else
            echo "‚úÖ No obvious broken links detected"
          fi
          
          # Check documentation completeness
          echo "=== Documentation Completeness ==="
          ref_files=$(find reference -name "*.html" | wc -l)
          echo "üìä Reference pages generated: $ref_files"
          
          if [ "$ref_files" -lt 50 ]; then
            echo "‚ö†Ô∏è  Warning: Expected more reference pages (got $ref_files, expected 50+)"
          else
            echo "‚úÖ Documentation completeness check passed"
          fi