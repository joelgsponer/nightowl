# Workflow derived from https://github.com/r-lib/actions/tree/v2/examples
# Need help debugging build failures? Start at https://github.com/r-lib/actions#where-to-find-help
on:
  push:
    branches: [main, master, dev]
  pull_request:
    branches: [main, master, dev]

name: R-CMD-check

permissions: read-all

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: macos-latest,   r: 'release'}
          - {os: windows-latest, r: 'release'}
          - {os: ubuntu-latest,   r: 'devel', http-user-agent: 'release'}
          - {os: ubuntu-latest,   r: 'release'}
          - {os: ubuntu-latest,   r: 'oldrel-1'}

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      R_KEEP_PKG_SOURCE: yes

    steps:
      - uses: actions/checkout@v4

      - uses: r-lib/actions/setup-pandoc@v2

      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.config.r }}
          http-user-agent: ${{ matrix.config.http-user-agent }}
          use-public-rspm: true

      - name: Cache R packages
        uses: actions/cache@v4
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ matrix.config.r }}-${{ hashFiles('DESCRIPTION') }}-${{ hashFiles('renv.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.config.r }}-${{ hashFiles('DESCRIPTION') }}-
            ${{ runner.os }}-${{ matrix.config.r }}-

      - uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: any::rcmdcheck
          needs: check
          cache-version: 2

      - uses: r-lib/actions/check-r-package@v2
        with:
          upload-snapshots: true
          build_args: 'c("--no-manual","--compact-vignettes=gs+qpdf")'
          
  # Additional CRAN compliance checks
  CRAN-compliance:
    runs-on: ubuntu-latest
    name: CRAN Compliance Checks
    
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      R_KEEP_PKG_SOURCE: yes

    steps:
      - uses: actions/checkout@v4

      - uses: r-lib/actions/setup-pandoc@v2

      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: 'release'
          use-public-rspm: true

      - name: Cache R packages
        uses: actions/cache@v4
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-release-${{ hashFiles('DESCRIPTION') }}-${{ hashFiles('renv.lock') }}
          restore-keys: |
            ${{ runner.os }}-release-${{ hashFiles('DESCRIPTION') }}-
            ${{ runner.os }}-release-

      - uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: any::rcmdcheck
          needs: check
          cache-version: 2

      - name: Check package with --as-cran
        run: |
          options(crayon.enabled = TRUE)
          rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran"), error_on = "warning", check_dir = "check")
        shell: Rscript {0}

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: cran-check-results
          path: check
          
      - name: Check for debugging code
        run: |
          # Check for browser() calls
          if grep -r "browser()" R/ --include="*.R"; then
            echo "ERROR: Found browser() calls in R code - not allowed for CRAN"
            exit 1
          fi
          
          # Check for other debugging functions
          if grep -r -E "(trace\(|debug\(|debugonce\()" R/ --include="*.R"; then
            echo "WARNING: Found debugging functions in R code"
          fi
          
          echo "✓ No debugging code found"

      - name: Validate DESCRIPTION file
        run: |
          Rscript -e "
          desc <- read.dcf('DESCRIPTION')
          
          # Check for placeholder values
          if (grepl('What the Package Does', desc[,'Title'])) {
            stop('DESCRIPTION Title contains placeholder text')
          }
          
          if (grepl('What the package does', desc[,'Description'])) {
            stop('DESCRIPTION Description contains placeholder text')
          }
          
          if (grepl('first.last@example.com', desc[,'Authors@R'])) {
            stop('DESCRIPTION contains placeholder email')
          }
          
          cat('✓ DESCRIPTION file validation passed\n')
          "

      - name: Check package size
        run: |
          Rscript -e "
          # Build source package
          pkg_file <- pkgbuild::build('.', dest_path = tempdir())
          pkg_size <- file.size(pkg_file) / 1024^2  # Convert to MB
          
          cat('Package size:', round(pkg_size, 2), 'MB\n')
          
          # CRAN prefers packages under 5MB
          if (pkg_size > 5) {
            warning('Package size exceeds 5MB - consider reducing size for CRAN submission')
          }
          "

      - name: Check examples run successfully  
        run: |
          Rscript -e "
          # Run examples to ensure they work
          tools::run_examples('.')
          cat('✓ All examples run successfully\n')
          "

      - name: Generate CRAN submission checklist
        run: |
          cat > cran-submission-checklist.md << 'EOF'
          # CRAN Submission Checklist
          
          ## Automated Checks Passed ✓
          - [x] R CMD check --as-cran passes without errors or warnings
          - [x] No debugging code (browser(), trace(), etc.)
          - [x] DESCRIPTION file has proper metadata
          - [x] Examples run successfully
          - [x] Package builds on multiple platforms
          
          ## Manual Review Required
          - [ ] License file is included and valid
          - [ ] NEWS.md or ChangeLog documents changes
          - [ ] All exported functions have proper documentation
          - [ ] Vignettes (if any) build successfully
          - [ ] No use of deprecated R functions
          - [ ] No unnecessary dependencies
          
          ## Before CRAN Submission
          - [ ] Update version number if needed
          - [ ] Create cran-comments.md file
          - [ ] Test on CRAN-like environment
          - [ ] Submit to win-builder for pre-check
          EOF
          
          echo "Generated CRAN submission checklist"

      - name: Upload CRAN checklist
        uses: actions/upload-artifact@v4
        with:
          name: cran-submission-checklist
          path: cran-submission-checklist.md